-- This script updates the database to support ratings and comments.
-- Please run this script in your Supabase SQL Editor.

-- 1. Add columns for average rating to the 'games' table
ALTER TABLE public.games
ADD COLUMN avg_rating REAL DEFAULT 0,
ADD COLUMN rating_count INT DEFAULT 0;

COMMENT ON COLUMN public.games.avg_rating IS 'Average rating from 1-5, calculated from the ratings table.';
COMMENT ON COLUMN public.games.rating_count IS 'Total number of ratings received.';

-- 2. Create the "ratings" table to store individual ratings
CREATE TABLE public.ratings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  game_id BIGINT REFERENCES public.games(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  rating SMALLINT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  UNIQUE (game_id, user_id) -- Each user can only rate a game once
);

COMMENT ON TABLE public.ratings IS 'Stores individual user ratings for each game.';
ALTER TABLE public.ratings ENABLE ROW LEVEL SECURITY;

-- Policies for ratings table
CREATE POLICY "Public ratings are viewable by everyone" ON public.ratings FOR SELECT USING (true);
CREATE POLICY "Users can insert their own ratings" ON public.ratings FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Users can update their own ratings" ON public.ratings FOR UPDATE USING (auth.uid() = user_id);

-- 3. Create the "comments" table to store comments
CREATE TABLE public.comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  game_id BIGINT REFERENCES public.games(id) ON DELETE CASCADE NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  content TEXT NOT NULL CHECK (char_length(content) > 2)
);

COMMENT ON TABLE public.comments IS 'Stores user comments for each game.';
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- Policies for comments table
CREATE POLICY "Public comments are viewable by everyone" ON public.comments FOR SELECT USING (true);
CREATE POLICY "Users can insert their own comments" ON public.comments FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Users can delete their own comments" ON public.comments FOR DELETE USING (auth.uid() = user_id);

-- 4. (Highly Recommended) Create a function to update the average rating automatically
CREATE OR REPLACE FUNCTION update_avg_rating()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE public.games
  SET
    avg_rating = (SELECT AVG(rating) FROM public.ratings WHERE game_id = NEW.game_id),
    rating_count = (SELECT COUNT(*) FROM public.ratings WHERE game_id = NEW.game_id)
  WHERE id = NEW.game_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 5. Create a trigger to run the function automatically on new ratings
CREATE TRIGGER on_new_rating
AFTER INSERT OR UPDATE ON public.ratings
FOR EACH ROW
EXECUTE FUNCTION update_avg_rating();
