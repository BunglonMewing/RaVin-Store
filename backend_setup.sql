-- 1. Buat Tabel "games"
-- Tabel ini akan menyimpan metadata untuk setiap APK yang diunggah.

CREATE TABLE public.games (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  title TEXT NOT NULL,
  category TEXT NOT NULL,
  description TEXT,
  version TEXT,
  size TEXT,
  img_url TEXT,
  apk_path TEXT NOT NULL,
  uploaded_by UUID REFERENCES auth.users(id) NOT NULL
);

-- Memberi komentar pada setiap kolom untuk kejelasan
COMMENT ON COLUMN public.games.title IS 'Nama game atau aplikasi.';
COMMENT ON COLUMN public.games.category IS 'Kategori game (mis. Sports, Action).';
COMMENT ON COLUMN public.games.description IS 'Deskripsi singkat game.';
COMMENT ON COLUMN public.games.version IS 'Versi APK, mis. 1.0.2.';
COMMENT ON COLUMN public.games.size IS 'Ukuran file dalam format teks, mis. 128 MB.';
COMMENT ON COLUMN public.games.img_url IS 'URL ke gambar thumbnail/poster (fitur masa depan).';
COMMENT ON COLUMN public.games.apk_path IS 'Path file di dalam Supabase Storage bucket.';
COMMENT ON COLUMN public.games.uploaded_by IS 'User ID dari pengguna yang mengunggah.';


-- 2. Aktifkan Row Level Security (RLS)
-- Ini adalah langkah keamanan penting untuk melindungi data Anda.
-- Secara default, tidak ada yang bisa mengakses tabel ini sampai kita membuat kebijakan (policy).

ALTER TABLE public.games ENABLE ROW LEVEL SECURITY;


-- 3. Buat Kebijakan (Policies) untuk RLS

-- KEBIJAKAN 1: Izinkan semua orang (publik) untuk MELIHAT data game.
CREATE POLICY "Public games are viewable by everyone"
ON public.games FOR SELECT
USING (true);

-- KEBIJAKAN 2: Izinkan pengguna yang sudah login (authenticated) untuk MENGUNGGAH game baru.
CREATE POLICY "Users can insert their own games"
ON public.games FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- KEBIJAKAN 3: Izinkan pengguna untuk MEMPERBARUI game mereka sendiri.
CREATE POLICY "Users can update their own games"
ON public.games FOR UPDATE
USING (auth.uid() = uploaded_by);

-- KEBIJAKAN 4: Izinkan pengguna untuk MENGHAPUS game mereka sendiri.
CREATE POLICY "Users can delete their own games"
ON public.games FOR DELETE
USING (auth.uid() = uploaded_by);

-- Pesan akhir: Skrip selesai. Anda sekarang memiliki tabel 'games' yang aman.
-- Langkah selanjutnya adalah membuat Storage Bucket. Lihat README.md.

-- =================================================================
-- ADMIN FUNCTION: ADD COINS TO USER
-- =================================================================
-- FUNGSI INI HANYA UNTUK ADMIN.
-- Fungsi ini menggunakan SECURITY DEFINER, artinya akan berjalan dengan hak akses
-- dari pemilik fungsi (biasanya admin/postgres), bukan pengguna yang memanggilnya.
-- Ini memungkinkan penambahan koin tanpa perlu service_role key di sisi klien,
-- namun pastikan RLS pada tabel `profiles` diatur dengan benar dan fungsi ini
-- tidak terekspos ke publik secara tidak sengaja.
-- =================================================================
CREATE OR REPLACE FUNCTION add_coins_to_user(user_email TEXT, amount_to_add INT)
RETURNS TEXT AS $$
DECLARE
  target_user_id UUID;
BEGIN
  -- 1. Dapatkan ID pengguna dari email mereka di tabel auth.users
  SELECT id INTO target_user_id FROM auth.users WHERE email = user_email;

  -- Jika pengguna tidak ditemukan, kembalikan error
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Pengguna dengan email % tidak ditemukan.', user_email;
  END IF;

  -- 2. Tambahkan koin ke profil pengguna
  -- Menggunakan `ON CONFLICT` untuk membuat profil jika belum ada, lalu menambahkan koin.
  INSERT INTO public.profiles (id, coins)
  VALUES (target_user_id, amount_to_add)
  ON CONFLICT (id)
  DO UPDATE SET coins = profiles.coins + amount_to_add;

  -- 3. Kembalikan pesan sukses
  RETURN 'Sukses! ' || amount_to_add || ' koin telah ditambahkan ke akun ' || user_email;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
